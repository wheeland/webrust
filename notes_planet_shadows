
http://developer.download.nvidia.com/SDK/10.5/opengl/src/cascaded_shadow_maps/doc/cascaded_shadow_maps.pdf
https://docs.microsoft.com/en-us/windows/desktop/DxTechArts/cascaded-shadow-maps
http://ogldev.atspace.co.uk/www/tutorial47/tutorial47.html
http://ogldev.atspace.co.uk/www/tutorial49/tutorial49.html
https://www.gamedev.net/forums/topic/659150-csm-cascaded-shadow-maps-split-selection/
http://advances.realtimerendering.com/s2012/insomniac/Acton-CSM_Scrolling(Siggraph2012).pdf
http://dev.theomader.com/stable-csm/


1. replace spot with directional light by projecting into rotated cube
2. render into multiple cubes trivially
3. align them optimally
4. only move by pixel coords

- render into multiple cubes with trivial selection
- extend shaders to choose between multiple shadow maps
- use frustum to choose regions
- refine

the weird strips for smaller volumes that go dark behind a certain threshold?
    -> that's then far plane of the texture! everything behind that can only have a greater z!
    
predefine a series of shadow map sizes (in sun space), e.g.
    radius
    0.5 * radius
    0.25 * radius, etc...
only deal in these sizes. at each frame, we decide which of these to use
and map these a multiple of shadow screen space

when moving camera: blend between old camera and new camera, old+new = discrete steps

only generate like 1 depth map per frame, do the rest by blending and interpolating (as long as the differences are not too big)

there is a sun controller that maintains
    - old, curr, new position
    - it always interpolates from old -> curr
    - when curr is met, all new ones have to be generated already, and it flips to the next cycle
    - only cascades for the next generation are generated dynamically, the old ones just stay

todo
    - soft edges: http://codeflow.org/entries/2013/feb/15/soft-shadow-mapping/
        https://gamedev.stackexchange.com/questions/66030/exponential-variance-shadow-mapping-implementation
        https://www.gamedev.net/forums/topic/678518-some-questions-about-cascaded-variance-shadow-mapping/
        http://lousodrome.net/blog/light/2012/01/23/variance-shadow-maps/
        https://mynameismjp.wordpress.com/2013/09/10/shadow-maps/  https://mynameismjp.wordpress.com/2015/02/18/shadow-sample-update/
    - proper culling of the depth-rendered plates: need to do orthogonal culling (not frustum)
        -> send own culler object, enum { Frustum(..), Orthogonal(..) }
    - only use low-poly objects for depth pass

- conceptually, this can be seen as a huge texture (seen from the sun) with different texture LODs
- the different LODs can, but must not overlapt. they should not have spaces in between them, though
- when rendering the final scene, we are moving inside this multi-layer 2D space
- the only thing we can do here is to navigate this space
- we start with a vec2f into this texture! there can be minification and magnification, just like normal textures
- and in the end, it's a bool texture! either texel is either IN or OUT, given a specific depth to compare against
- that means for each rendered pixel, we get a new IN/OUT map (with like a vaying depth-threshold applied to it)
- imagine looking at the terrain with a (distorted) grid on top, where each grid-cell is BLACK or WHITE
- all the filtering, interpolating etc. that we do would equally have to work on a regular 2D texture.
    examples: gauss blur, linear filtering.
-> it has to be continuous when switching from int(coords) -> int(coords) + 1!
- look at quadrilear filtering (christoph)
- can we use the second sun texture? it's just a different bool-map tho...

-> step 1: make sure that the BLACK/WHITE texture is tight! no weird artifacts, depth offsets correctly, etc.
-> the smaller sunDotN, the larger the offset
