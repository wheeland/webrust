texturing
    - texture upload from web (via server?) or file
    - 2d texture application on 3d, see http://www.decarpentier.nl/scape-render

TODO
    - reduce raleigh backscattering 
    - fix back culling

graphical effects
    - general:
        check http://www.adriancourreges.com/blog/2015/11/02/gta-v-graphics-study/ and assorted
    x athmosphere (continuously fading in/out)
        -> this would ideally include distance fog, right?
        -> can't we do this the same concept as in the C++ thing?
    - proper depth and shit
        https://nlguillemot.wordpress.com/2016/12/07/reversed-z-in-opengl/
    - color terrain based on average incoming sun color (based on optical depth texture)
        - this can be a simple cubemap!
        - could also be used as input for PBR rendering materials?
        - even simpler: this can be expressed as a function vec3 attenuation(sunAngle)
            -> the larger the angle, the more blue light gets removed -> the redder it gets
    - (fog)
    x shadows: do the 'ol classic shadow mapping, but LODdy
    x external textures
    - clouds
    - depth of field blur
    - final tone mapping / HDR-to-RGB8
    - sun lens flare
    - water rendering
    - stars
    - rain/snow with splashes
    - sort planes according to Z value to prevent overdraw
    - voronoi on sphere: https://whenitsdone.org/2014/07/29/map-generation-on-spherical-planet-part-i/

references
    http://advances.realtimerendering.com
    http://wiki.flightgear.org/Procedural_Texturing

examples
    https://www.youtube.com/watch?v=-L_C3VMt4wM
    
    https://leatherbee.org/index.php/2018/10/06/terrain-generation-1-introduction/
    https://www.redblobgames.com/maps/terrain-from-noise/
    http://thingonitsown.blogspot.com/2018/11/building-better-terrain.html
    http://squall-digital.com/ProceduralGeneration.html
    http://libnoise.sourceforge.net/examples/complexplanet/index.html
    http://squall-digital.com/ProceduralGeneration.html

textures
    - additional entries in planet window
    - add from URL or upload, give name
    - list them, with name and image
    - access them in shader via name
